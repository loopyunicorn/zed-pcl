project(pclzed)
 
 CMAKE_MINIMUM_REQUIRED(VERSION 2.4)
 
 if(COMMAND cmake_policy)
 	cmake_policy(SET CMP0003 OLD)
 	cmake_policy(SET CMP0015 OLD)  
 endif(COMMAND cmake_policy)
 
 SET(EXECUTABLE_OUTPUT_PATH ".")
 
 IF(WIN32) # Windows
     SET(ZED_INCLUDE_DIRS $ENV{ZED_INCLUDE_DIRS})
     SET(ZED_LIBRARIES $ENV{ZED_LIBRARIES_64})
     SET(ZED_LIBRARY_DIR $ENV{ZED_LIBRARY_DIR})
     SET(OPENCV_DIR $ENV{OPENCV_DIR})
     SET(EIGEN3_INCLUDE_DIR $ENV{EIGEN_DIR})
 ELSE() # Linux
     find_package(ZED 1.0 REQUIRED)
     find_package(Eigen3 REQUIRED)
     
     ##For Jetson, OpenCV4Tegra is based on OpenCV2.4
     exec_program(uname ARGS -p OUTPUT_VARIABLE CMAKE_SYSTEM_NAME2)
     if ( CMAKE_SYSTEM_NAME2 MATCHES "aarch64" OR CMAKE_SYSTEM_NAME2 MATCHES "armv7l" )
         SET(OCV_VERSION "2.4")
         SET(CUDA_VERSION "")
     endif()
 ENDIF(WIN32)
 
 find_package(OpenCV ${OCV_VERSION} COMPONENTS core highgui imgproc REQUIRED)
 find_package(CUDA ${CUDA_VERSION} REQUIRED)
 find_package(PCL)
 
 include_directories(${CUDA_INCLUDE_DIRS})
 include_directories(${PCL_INCLUDE_DIRS})
 include_directories(${ZED_INCLUDE_DIRS})
 include_directories(${OpenCV_INCLUDE_DIRS})
 include_directories(${EIGEN3_INCLUDE_DIR})
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
 
 link_directories(${ZED_LIBRARY_DIR})
 link_directories(${CUDA_INCLUDE_DIRS})

 SET (SRC_FOLDER source)

 add_executable (pclzed main.cpp)

 TARGET_LINK_LIBRARIES(pclzed
                        ${ZED_LIBRARIES}
                        ${OpenCV_LIBRARIES}
			${PCL_LIBRARIES}
                        ${CUDA_LIBRARIES} ${CUDA_npps_LIBRARY} ${CUDA_nppi_LIBRARY}
                    )



SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O3" ) # Release Perf mode 
